clear
ll
ls -la
clear
ls -la
clear
ls
ls -la
clear
echo $nu.env-path
starship init nu | save -f ~/.cache/starship/init.n
starship init nu | save -f ~/.cache/starship/init.nu
ls
clear
ls
ls -la
clear
la
ls -la | where Documents
echo $nu.env-path
cd .config/nushell/
ls
vim config.nu
nvim config.nu
vim env.nu
nvim env.nu
exit
clear
ls
ll
la
clear
zoxide init nushell | save -f ~/.zoxide.nu
ls
z nu
cd .config/nushell/
ls
vim env.nu
nvim env.nu
exit
z a
clear
cd
ls | where type == "dir" | table
ls -la | where type == "dir" | table
ls -la | where inode=474 | table
ls -la | where inode == 474 | table
ls -la | where inode == 474
ps
ps | where cpu > 0
clear
ls
ope get_bit_plane.py
open get_bit_plane.py
clear
ls
open taller2.md
clear
ls
cd Descargas/
ls
z Org
ls
cd Estado_Arte/
ls
cd Maestria/
ls
open comparativa_estado_del_arte.csv
open comparativa_estado_del_arte.csv | get Año
ls | sort-by size | reverse
help commands 
whoami
help commands | first
ls | length 
date now
clear
ls
ls -la
ls -la | where inode == 474
ls -la | where num_links == 8
ls
open comparativa_estado_del_arte.csv | get Año
open comparativa_estado_del_arte.csv
open comparativa_estado_del_arte.csv | get Autor
open comparativa_estado_del_arte.csv | where Autor == "Sudip*"
open comparativa_estado_del_arte.csv | where Autor == Sudip*
1..10 | each {$in * 2}
cd
clear
ls
ls | select name type
ls -la | select name type
ls -la
ls -la | select name mode
clear
ls
cd .config/nushell/
ls
vim history.txt
nvim history.txt
ls
vim config.nu
nvim config.nu
clear
ls
vim alias.nu
ll
la
nvim alias.nu
rm alias.nu
ls
vim config.nu
nvim config.nu
rg completion
config set completion_mode "list"
config
config get edit_mode
config nu get
config nu env.nu
cd
ls
cd .config/nushell/
ls
nvim config.nu
exit
vim config.nu
nvim config.nu
clear
jls
exiftool default.pdf
stat default.pdf
z dot
ls
cd etc/
ls
vim nftables.conf
ll
clear
la
ls -la | select name mode
clear
ls
cd Documentos/
ls
clear
cd Proyectos/
ls
clear
ls
cd Writings/
ls
cd Maestria/
ls
cd Tesis/
ls
clear
ls
cd dataset/
ls
cd mimic_perform_af_csv/
ls
clear
ls
vim mimic_perform_af_001_data.csv
nvim mimic_perform_af_001_data.csv
clear
ls
clear
ll
la
ls -la
clear
ll
clear
ls -la
clear
clear
ll
clear
ls
clear
ls
cd
ls
clear
ls
cd Descargas/
ls
clear
ls
z im
clear
ls
clear
ls
vimc
clear
ls
z nu
ls
..
cd
ls
cd .config/
ls
cd nushell/
ls
clear
ls
vim env.nu
ll
clear
exit
clear
ll
plugin list
clear
ls
ll
nvim env.nu
ls
btop
vim config.nu
nvim config.nu
ll
ls
clear
nvim env.nu
nvim history.txt
clear
ls
clear
ls
clear
ls
ss -putona
clear
port list
ys
clear
ls
ys
exit
ys
clear
nvim env.nu
ll
clear
ls
vim .git/hooks/post-commit
vim .gitignore
ls
clear
ls
..
ls
cd lecturas/
ls
..
ls
..
ls
..
clear
ls
cd Cursos/
ls
cd Reunion_Ciberseguridad/
ls
cd poster/
ls
cd src/
ls
clear
ls
cd figures/
ls
clear
fm
clear
ls
clear
ll
clear
ll
clear
cd Descargas/
ls
clear
ls
zt `Albert Camus - La muerte feliz-ePubLibre (2015).epub`
clear
ls
exit
ls
cd Descargas/
ls
zt $0
clear
ls
clear
ls
clear
ls
fm
ls
fm
..
ls
..
ls
..
ls
cd poster-dic2024/
ls
clear
ls
cd src/
ls
cd figures/
ls
fm
ls
zt metodologia.pdf
clear
zt metodologia.pdf
ls
clear
ls
..
ls
vim index.tex
ls
z Exp
ls
cd dataset/
ls
cd mimic_perform_af_csv/
ls
open mimic_perform_af_001_data.csv
open mimic_perform_af_001_data.csv | explore
open mimic_perform_af_001_data.csv | from json
open mimic_perform_af_001_data.csv | to json
open mimic_perform_af_001_data.csv | to yml
open mimic_perform_af_001_data.csv | to yaml
open mimic_perform_af_001_data.csv | to json
open mimic_perform_af_001_data.csv | to json | get items
clear
ls
..
ls
..
ls
open seleccionar.py
open seleccionar.py | str replace "ranking" "rank"
open seleccionar.py | str replace --all "ranking" "rank"
clear
ls
z dot
ls
z nu
ls
clear
z nu
ls
z nushell
ls
cd
ls
cd .config/nushell/
ls
vim config.nu
ls
vim env.nu
ls
vim config.nu
clear
ls
vim config.nu
ls
vimc
clear
zshc
ls
vimc
starship init nu | save -f ~/.cache/starship/init.nu
ls
ys
clear
ys
exit
nu
ys
exit
nu
clear
ls
starship init nu | save -f ~/.cache/starship/init.nu
clear
ls
clear
echo $LCOLORCATPPUCCIN
$env.LCOLORCATPPUCCIN
$env.FZF_DEFAULT_OPTS
vim ~/.zshrc
ls
clear
vimc
ls
ll
clear
ls
clear
ls
clear
ls
clear
vimc
ls
clear
vimc
ls
la
clear
ls
ls | grid --color
ls | sort-by type name -i | grid -c
exit
nu
zshc
clear
ls
la
clear
zshc
clear
ls
ci
find . --type d | group-by | each { |it| $it.path.split('/')[..-2] } | group-by | sort-by size
find -h
ls **
clear
chmod -h
chmod --help
clear
ll
clear
find -h
help find
clear
ls
help find
ls ** | where type == Dir
ls
ls | where type == Dir
ls | where type == dir
ls ** | where type == dir
ys
yay -Slq | lines | each { |pkg| $pkg } | fzf --multi --preview { |pkg| "yay -Si $pkg" } | lines | each { |pkg| "yay -S $pkg" | run }
clear
ls
yay -Slq | lines | fzf --multi --preview { |pkg| "yay -Si $pkg" } | lines | each { |pkg| "yay -S $pkg" | run }
clear
ls
yay -Slq
yay -Slq | fzf --multi --preview 'yay -Si {1}'
yay -Slq | fzf --multi --preview 'yay -Si {1}' | xargs -ro yay -S
ys
ls
ys
du1
du
du | where depth == 1 | sort-by size<\n>
du | where depth == 1 | sort-by size
du . | sort-by size
ls
cd Descargas/
ls
du
..
ls
cd .vim/
ls
..
ls
cd Vídeos/
ls
clear
ls
du
du | sort-by size
du
help du
du -d 1
du -d 0
du -d 0 | sort-by physical
du -d 0 | sort-by physical -r
clear
neofetch
fm
man nushell
man nu
Applications 
clear
ls
clear
cd
USB
env.USB
$env.USB
Usb
$env.USB
clear
ip
ip add
clear
date
date humanize
date now
date to-table
date now to-table
date now | to-table
date
date humanize
date now
date now | date to-table
date now | date humanize
date now | date to-table
clear
ls
clear
ls
vimc
clear
ls
vimc
vim
ls
clear
ls
vim
clear
ll
ls
clear
ls
vim archivo.txt
zshc
ls
topgrade
clear
ls
vimc
clear
ls
z env
ls
z Exp
clear
ls
clear
ls
vim _mimic.qmd 
poetry sell
clear
ls
clear
ls
z nu
ls
vim config.nu
z exp
poetry sell
z exp
poetry sell
ls
clear
ls
z nu
ls
vim env.nu
ls
clear
ls
z exp
poetry sell
clear
ls
clear
ls
z exp
poetry sell
vim config.nu
ls
z nu
ls
vim config.nu
ls
z exp
ls
cd utils/
ls
vim style.py
ls
z dic
ls
cd src/
ls
..
ls
zt build/default/default.pdf
clear
ls
z exp
ls
cd utils/
ls
vim _mimic.qmd 
z exp
poetry sell
vim _mimic.qmd 
ls
z exp
ls
vim algot.qmd
ls
clear
ls
vim _mimic.qmd 
ls
clear
vim resultados.qmd
fm
vim resultados.qmd
git status
ls
clear
ls
clear
ls
git status
fm
git status
gac
clear
ls
git status
cp images/ ~/Git/avancesCA/
cp -r images/ ~/Git/avancesCA/
git status
git commit -am "Incluir algoritmos"
vim seleccionados.py
clear
git status
git add
git add -A
git commit -m "Incluir extensiones"
cd
ls
z dot
ls
Git
cd
ls
cd Git
ls
clear
ls
cd avancesCA/
ls
git status
git add -A
git commit -m "Add images"
git push
z exp
ls
clear
ls
z Maes
ls
vim comparativa_estado_del_arte.csv
ls
clear
ls
z mimic
ls
open mimic_perform_af_001_data.csv
open mimic_perform_af_001_data.csv | to json
open mimic_perform_af_001_data.csv | to json | get items
open mimic_perform_af_001_data.csv | to json | to yaml
clear
ls
..
ls
clear
ls
..
ls
clear
ls
ls | where type == dir
ls | where type == dir | select name
ls
clear
ls
clear
ls
clear
ls
btop
clear
ls
vim graficar.qmd
vim algot.qmd 
ls
clear
ls
fm
z nvim
ls
clear
ls
cd lua
ls
vimc
z ft
ls
vim csv.lua 
cd
ls
z env
ls
z exp
ls
clear
ls
vim One-to-Many-Results.csv
ls
open One-to-Many-Results.csv
open One-to-Many-Results.csv | select f1, accuracy
open One-to-Many-Results.csv | select f1 accuracy
z rofi
ls
cd scripts/
ls
./battery
acpi -bi
clear
ls
clear
ls
clear
ls
zt `Descargas/solicitud permiso_ MLHJ.pdf`
ping google -c 5
nmtui
ping google -c 5
ping google.com -c 5
ls
env.USB
$env.USB
clear
ls
clear
ls
cp `Formato de Evaluación de CURSOS.doc` /run/media/think-crag/54FAD91D0B85B620/
clear
acpi -bi
ls
clear
z Exp
ls
nmtui
ping google.com -c 5
acpi -bi
echo "WyvernCrag" | sha256sum
Git
z dot
ls
z desc
ls
clear
cd
ls
cd Descargas/
ls
clear
zshc
z nu
ls
vim config.nu
ls
vim env.nu
acpi -ia
acpi -iv
acpi -bi
acpi -ba
clear
ls
clear
ls
vim history.txt
clear
ls
clear
ls
vimc
ls
clear
viml
clear
ls
cd
la
clear
cd Descargas/
ls
zt 2936230000_CATRE_EN_WEB.pdf
topgrade
clear
ls
clear
ls
cd Documentos/
ls
cd Ecosur/
ls
clear
fm
acpi -ba
vimc
clear
topgrade
ls
cd
ls
clear
ls
z Ecosur
ls
clear
ls
cd wordpress/
ls
clear
ls
cd template-ecosur-wordpress-child/
ls
..
ls
clear
ls
cd template-ecosur-wordpress/
ls
clear
..
ls
..
ls
..
ls
cd
ls
z Ecosur
ls
cd wordpress/
ls
cd wp_data/
clear
ls
..
ls
clear
ls
cd plugin-wordpress-datos-ecosur/
ls
cd components/
ls
..
ls
clear
ls
cd css/
ls
..
ls
cd js/
ls
clear
ls
..
ls
cd short-codes/
ls
clear
ls
cd acerca-de-EC/
ls
vim index.php
..
ls
vim index.php 
ls
clear
ls
vim refactor.txt
ls
git status
clear
ls
git status
git pull
clear
ls
..
ls
..
ls
..
ls
cd
ls
clear
vimc
hyprctl clients
zshc
clear
ls
vimc
ll
clear
ls
vim install.sh
ls
rm metodologia.free
clear
ls
vim obj.md
rm obj.md
clear
ls
vim archivo.txt
rm archivo.txt
hyprc
ls
z wayland
ls
cd scripts/
ls
clear
ls
vim hypr-run.sh
ls
hyprc
ls
vim hypr-run.sh
ls
hyprc
vim hypr-run.sh
clear
ls
vim hypr-run.sh
lspci | grep -E 'VGA|3D'
hyprc
z wayland
ls
cd scripts/
ls
hyprc
ls
vim hypr-run.sh
ls
z wayland
ls
cd scripts/
ls
./hypr-run.sh hybrid
./hypr-run.sh -m hybrid
hyprc
ls
hyprc
Hyprland
hyprc
z hypr
ls
z wayland
ls
cd scripts/
ls
clea r
ls
vim hypr-run.sh hypr-run.sh
z wayland
ls
cd scripts/
ls
sudo cp hypr-run.sh /usr/local/bin/
z /usr/local/bin
ls
cat hypr-run.sh
clear
cd
ls
hypr-run.sh -m hybrid
ls
clear
ls
vimc
ls
clear
ls
hyprc
vdpauinfo 
clear
nvidia-smi
vainfo
clear
ls
clear
hyprc
zshc
hyprc
ls
z wayland
ls
vim electron-flags.conf
ls
vim electron-flags.conf
ls
vim electron-flags.conf
hyprc
z wayland
ls
cd scripts/
ls
vim hypr-run.sh
sudo cp hypr-run.sh /usr/local/bin/
microsoft-edge-stable --ozone-platform=wayland
hyprc
z wayland
ls
vim electron-flags.conf
vim scripts/
cd scripts/
ls
hyprc
hypr-run.sh -m hybrid
ls
hyprc
z wayland
ls
hyprc
z wayland
ls
z scripts/
ls
z scripts/
ls
z wayland
ls
z scripts/
ls
clear
ls
sudo cp hypr-run.sh /usr/local/bin/
ls
hyprc
vim hypr-run.sh
hyprc
z wayland
ls
cd scripts/
ls
vim hypr-run.sh
./hypr-run.sh -m hybrid
hyprc
clear
ls
hyprc
ls
vim newm-run.sh
hyprc
hyprctl monitors
clear
hyprc
ls
z wayland
ls
cd scripts/
ls
vim hypr-run.sh
z wayland
ls
cd scripts/
ls
./hypr-run.sh -m hybrid
vim hypr-run.sh
./hypr-run.sh -m hybrid
hyprc
./hypr-run.sh -m hybrid
hyprc
z wayland
ls
cd scripts/
ls
zshc
hypr
hyprc
vim hypr-run.sh
./hypr-run.sh -m hybrid
hyprc
z scripts
ls
./hypr-run.sh -m hybrid
hyprc
vim hypr-run.sh
z scripts
./hypr-run.sh -m hybrid
hyprc
vim hypr-run.sh
z scripts
./hypr-run.sh -m hybrid
z scripts
ls
z scripts
ls
z scripts
ls
hyprc
./hypr-run.sh -m hybrid
hyprc
z scripts
./hypr-run.sh -m hybrid
hyprc
ls
z hyprc
ls
z hyprc
clear
ls
hyprc
z scripts
./hypr-run.sh -m hybrid
hyprc
ls
z scripts
sudo cp hypr-run.sh /usr/local/bin/
ls
hyprctl monitors
hyprc
hyprctl monitors
clear
hyprctl monitors
clear
hyprc
ls
hyprc
topgrade
clear
hyprc
hyprpm update
clear
hyprc
vainfo
clear
vainfo
clear
vainfo
clear
microsoft-edge-stable --ozone-platform=wayland
ls
hyprc
vainfo
clear
hyprc
vainfo
hyprc
fkill
clear
hyprc
vainfo
clear
hyprc
rm -rf .cache/hyprland/
ls
hyprc
z scripts
ls
z scripts
ls
sudo cp hypr-run.sh /usr/local/bin/
clear
ls
vimc
hyprc
clear
rm -rf .cache/hyprland/
vainfo
clear
hyprc
LIBVA_DRIVER_NAME=nvidia microsoft-edge-stable --ozone-platform=wayland
hyprc
MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia microsoft-edge-stable --ozone-platform=wayland
hyprc
cd
fd -H nvidia
fd -H hypr
clear
ls
hyprc
vainfo
hyprc
vainfo
clear
ls
hyprc
vdpauinfo 
clear
ls
hyprctl clients
clear
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
fkill
zshc
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia microsoft-edge-stable
clear
ls
hyprc
clear
ls
clear
ls
z hypr
ls
z wayland
ls
..
ls
cd wayland/
ls
clear
ls
hyprc
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
MESA_LOADER_DRIVER_OVERRIDE=zink microsoft-edge-stable
hyprc
hyprctl clients
clear
ls
vdpauinfo 
vainfo
hyprc
ls
clear
vainfo
clear
ls
hyprc
MESA_LOADER_DRIVER_OVERRIDE=zink microsoft-edge-stable
VAAPI_DEVICE=/dev/dri/renderD128 vainfo
VAAPI_DEVICE=/dev/dri/renderD129 vainfo
VAAPI_DEVICE=/dev/dri/renderD128 vainfo
hyprc
LIBVA_DRIVER_NAME=nvidia vainfo
hyprc
MESA_LOADER_DRIVER_OVERRIDE=zink microsoft-edge-stable
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
clear
ls
z wayland
ls
cd scripts/
ls
hyprc
ls
z wayland
ls
clear
ls
cd scripts/
ls
..
ls
vim electron-flags.conf
ls
clear
ls
cd scripts/
ls
vim open-wl
ls
clear
ls
vim wayland_enablement.sh
ls
..
ls
clear
ls
cd .config/
ls
clear
ls *.conf
ls
z wayland
ls
chmod +x enable_electron.sh
./enable_electron.sh
vim wayland_enablement.sh
./electron-flags.conf
vim electron-flags.conf
ls
z wayland
ls
z wayland
ls
./enable_electron.sh
vim electron-flags.conf
vim enable_electron.sh
./enable_electron.sh
z wayland
ls
./enable_electron.sh
bash enable_electron.sh
rm ~/.config/microsoft-edge-stable-flags.conf
./enable_electron.sh
vim enable_electron.sh
ln -vsf ./electron-flags.conf $HOME/.config/{chromium-flags.conf,chrome-flags.conf,chrome-channel-flags.conf,microsoft-edge-stable-flags.conf}
zhs
z wayland
ls
./enable_electron.sh
vim ~/.config/microsoft-edge-stable-flags.conf
ls
vim electron-flags.conf
z wayland
ls
./enable_electron.sh
vim ~/.config/chrome-channel-flags.conf
ls
vim electron-flags.conf
microsoft-edge-stable
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable &
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable&
clear
ls
vim electron-flags.conf
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable&
ls
z wayland
ls
vim enable_electron.sh
vim electron-flags.conf
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable&
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
hyprc
LIBVA_DRIVER_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
ls
ys
prime-run microsoft-edge-stable
MESA_LOADER_DRIVER_OVERRIDE=nvidia prime-run microsoft-edge-stable
clear
prime-run -h
prime-run --help
clear
ls
vim /bin/prime-run
ls
__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia VDPAU_DRIVER=nvidia microsoft-edge-stable
VAAPI_DRIVER=nvidia __NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia VDPAU_DRIVER=nvidia microsoft-edge-stable
__NV_PRIME_RENDER_OFFLOAD=0 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia VDPAU_DRIVER=nvidia microsoft-edge-stable
vainfo
nvidia-smi
clear
MESA_LOADER_DRIVER_OVERRIDE=nvidia google-chrome-stable
ls
vainfo
clear
hyprc
ls
zshc
__NV_PRIME_RENDER_OFFLOAD=0 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia VDPAU_DRIVER=nvidia VAAPI_DEVICE=/dev/dri/card1 microsoft-edge-stable
z wayland
ls
vim electron-flags.conf
vainfo
clear
ls
z wayland
vim electron-flags.conf
ls
clear
hyprc
vainfo
vim electron-flags.conf
bat /etc/modprobe.d/nvidia.conf
pacman -Qs egl-wayland
pacman -Qs optimus
MESA_LOADER_DRIVER_OVERRIDE=nvidia google-chrome-stable
hyprc
clear
rm -rf .cache/hyprland/
hyprc
microsoft-edge-stable
ls
clear
ls
z wayland
ls
cd scripts/
ls
cp open-wl envidia_run
ls
cp open-wl nvidia_run
ls
rm envidia_run
ls
vim /bin/prime-run
ys
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo | grep "OpenGL renderer"
ys
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo | grep "OpenGL renderer"
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxinfo | grep "OpenGL renderer"<\n>
__NV_PRIME_RENDER_OFFLOAD=1 __VK_LAYER_NV_optimus=NVIDIA_only vulkaninfo | grep deviceName<\n>
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia glxgears<\n>
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia google-chrome-stable --use-gl=desktop --enable-features=VaapiVideoDecoder --ignore-gpu-blocklist
z wayland
vim electron-flags.conf
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia google-chrome-stable --use-gl=desktop --enable-features=VaapiVideoDecoder --ignore-gpu-blocklist
ls
google-chrome-stable 
ls
vim electron-flags.conf
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia google-chrome-stable --use-gl=desktop --enable-features=VaapiVideoDecoder --ignore-gpu-blocklist
__NV_PRIME_RENDER_OFFLOAD=0 __VK_LAYER_NV_optimus=NVIDIA_only __GLX_VENDOR_LIBRARY_NAME=nvidia MESA_LOADER_DRIVER_OVERRIDE=nvidia LIBVA_DRIVER_NAME=nvidia VDPAU_DRIVER=nvidia VAAPI_DEVICE=/dev/dri/card1 microsoft-edge-stable
clear
env __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia /usr/bin/google-chrome-stable --use-gl=desktop --enable-features=VaapiVideoDecoder --ignore-gpu-blocklist<\n>
vim electron-flags.conf
vim nvidia_run
ls
..
ls
vim electron-flags.conf
clear
ls
vim electron-flags.conf
MESA_LOADER_DRIVER_OVERRIDE=nvidia google-chrome-stable
hyprc
clear
ls
hyprc
ls
clear
/usr/lib/dri
ls /usr/lib/dri
ls
zshc
hyprc
MESA_LOADER_DRIVER_OVERRIDE=nvidia microsoft-edge-stable
btop
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia microsoft-edge-stable
clear
topgrade
z Git
ls
Git
clear
ls
cd nvim/
ls
git pull
..
ls
rm -rf nvim/
clear
git clone https://github.com/Bekaboo/dot.git
ls
cd dot/
ls
clear
ls
cd .config/
ls
cd wezterm/
ls
vim wezterm.lua
clear
..
ls
cd fd/
ls
vim ignore
..
ls
cd nvim/
clear
ls
cd after/
ls
clear
z nvim
ls
cd ftplugin/
ls
cd ftplugin/
ls
vim lua/lsp.lua
vim lua.lua
vim markdown.lua
vim quarto/capitalized-title.lua
clear
ls
..
ls
vim vscode.vim
clear
ls
cd lua
ls
cd config/
ls
ls
..
ls
..
ls
cd lua/core
ls
vim autocmds.lua
clear
ls
vim autocmds.lua
vim autocmds.lua
vimc
ls
..
ls
cd utils/
ls
vim classes/bufopt_t.lua
ls
vim fs.lua
z nvim
ls
cd lua
ls
cd utils/
ls
vim misc.lua
z nvim
cd lua/utils/
ls
ls
..
ls
cd plugin/
ls
z nvim
ls
cd lua
ls
cd ui/
ls
vim statusline.lua 
ls
vimc
__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia microsoft-edge-stable
ls
clear
vainfo
clear
ls
hyprc
clear
vimc
ls
clear
ls
zt poster.pdf
clear
ls
rm poster.pdf
ls
rm `Formato de Evaluación de CURSOS.doc`
rm -h
clear
ls
z nu
ls
vim config.nu
clear
ls
vimc
ls
clear
ls
clea r
clear
neofetch
clear
ls
z wayland
ls
vim electron-flags.conf
hyprctl clients
clear
hyprctl clients
lunacy
ls
z wayland
ls
..
ls
clear
cd
ls
Git
ls
cd
ls
clear
ls
sudo pacman -Rnsc google-chrome-stable
clear
ls
sudo pacman -Rnsc transmission-gtk
neofetch
clear
ls
cd
ls
cd .local/share/applications/
ls
clear
vlc
ls
rm vlc.desktop
ls
rm inaoe.desktop
Ls
clear
ls
rm google-chrome.desktop
clear
ls
rm -rf ~/.mozilla/
clear
firefox --ProfileManager
ls
clear
ls
cp firefox.desktop inaoe.desktop
ls
vim inaoe.desktop
fkill
z nu
ls
vim config.nu
cd
ls
vim .zshfunc 
zshc
nvidia-smi
clear
nvidia-smi
clear
nvidia-smi
ys
vim /bin/prime-run
clear
ls
hyprc
prime-run firefox
env.QT_QPA_PLATFORM
$env.QT_QPA_PLATFORM
z wayland
ls
cd scripts/
ls
sudo cp nvidia_firefox /usr/local/bin/
nvtop
z wayland
ls
cd desktop/
ls
vim firefox.desktop
clear
z wayland
ls
cd scripts/ls
cd scripts/
ls
vim nvidia_firefox 
sudo cp nvidia_firefox /usr/local/bin/
clear
ls
nvidia_firefox
nvtop
hyprc
cd
ls
z wayland
ls
cd scripts/
ls
clear
ls
vim nvidia_firefox 
NVD_BACKEND=direct MOZ_DISABLE_RDD_SANDBOX=1 LIBVA_DRIVER_NAME=nvidia prime-run microsoft-edge-stable
hyprc
NVD_BACKEND=direct LIBVA_DRIVER_NAME=nvidia prime-run microsoft-edge-stable
NVD_BACKEND=direct VDPAU_DRIVER=nvidia LIBVA_DRIVER_NAME=nvidia prime-run microsoft-edge-stable
nvtop
clear
top
clear
la
clear
z bett
ls
cd lua
ls
btop
vim betterTerm.lua
z nvim
ls
clear
ls
z nvim
ls
clear
ls
cp -r ~/Git/dot/.config/nvim/colors/ .
ls
cd colors/
ls
clear
ls
vim sonokai.lua
ls
..
z dot
ls
..
ls
cd dot
ls
cd .config/nvim
ls
clear
ls
cd after/
ls
cd ftplugin/
lsz
ls
clear
ls
vim css.lua 
vim cpp/lsp.lua
z ft
ls
vim c.lua 
vim c/opts.lua 
vim diff.lua
vim editorconfig.lua
vim gdb.lua
vim git.lua
ls
clear
ls
vim help.lua
vim help.lua
vim html/opts.lua 
vim json/lsp.lua
vim jsonc/opts.lua 
vim netrw.vim
z ft
ls
vim qf.lua
clear
ls
z dot
cd .config/nvim
ls
cd after/ftplugin/
ls
clear
ls
ln -vsf markdown.lua quarto.lua
vim quarto/lsp.lua 
vim tex/lsp.lua
vim quarto.lua
vim typescript/opts.lua 
clear
ls
vim typescript.lua 
clear
ls
..
ls
..
ls
clear
ls
cd autoload/
ls
cd plugin/
ls
vim vscode.vim
..
ls
..
ls
..
ls
cp -r ~/Git/dot/.config/nvim/filetype.lua .
ls
vim filetype.lua
vim filetype.lua
cd indent/
ls
vim markdown.vim
clear
cp -r ~/Git/dot/.config/nvim/indent/ .
ls
cd indent/
ls
vim markdown.vim
..
ls
clear
ls
ls
..
ls
cd queries/
ls
vim markdown/textobjects.scm
cp -r ~/Git/dot/.config/nvim/queries/ .
ls
..
ls
cd plugin/
ls
ls
cd plugin/ls
cd plugin/
ls
clear
ls
vim _load.lua
nvtop
vimc
vim _load.lua
ls
vim clean.vim
vim help.lua
ls
z exp
ls
vim dataset/mimic_perform_af_csv/mimic_perform_af_002_data.csv
clear
ls
vim colorcolumn.lua 
ls
..
ls
cd syntax/
ls
vim markdown.vim
clear
z nvim
ls
cp -r ~/Git/dot/.config/nvim/syntax/ .
git status
clear
