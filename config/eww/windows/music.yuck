(defwidget music []
  (box
    :class "music-window"
    :space-evenly false
    ; force background position/size, otherwise it is overridden
    :style "
      background-image: url('${music.background}');
      background-position: center;
      background-size: cover;
    "

    (box ; cover art, first child
      :class "cover"
      :style "background-image: url('${music.cover}');")

    (box ; music info, second child
      :orientation "v"
      :space-evenly false
      :class "music-box"
      :style "background: none;"
      (scroll
        :hscroll true
        :vscroll false
        (label ; title
          :class "title text"
          :style "color: ${music.foreground};"
          :justify "center"
          :text {music.title}))
      (scroll
        :hscroll true
        :vscroll false
        (label ; artist
          :class "artist text"
          :style "color: ${music.foreground};"
          :justify "center"
          :text {music.artist}))

      (centerbox ; buttons
        :halign "center"
        :class "buttons"
        (button
          :onclick "playerctl previous"
          (label
            :style "color: ${music.foreground};"
            :class "icon"
            :text ""))
        (button
          :onclick "playerctl play-pause" 
          (label
            :style "color: ${music.foreground};"
            :class "icon"
            :text {music.status == "Playing" ? "" : "" }))
        (button
          :onclick "playerctl next" 
          (label
            :style "color: ${music.foreground};"
            :class "icon"
            :text "")))

      (box ; time info
        :orientation "v"
        (box
          :class "text"
          (label
            :xalign 0
            :class "music-time"
            :style "color: ${music.foreground};"
            :text {music_time.position})
          (label
            :xalign 1
            :class "music-time"
            :style "color: ${music.foreground};"
            :text {music.duration}))
        (box ; clickable progress bar
          :class "music-bar"
          (scale
            ; transform scale position percentage into song position
            :onchange "playerctl position `awk -v len=$(playerctl metadata mpris:length) 'BEGIN{print {} * len / 1000000 / 100}'`"
            :css ".top { background: ${music.foreground}; }"
            :value {music_time.position_percent}))))))

(defwindow music
  :stacking "fg"
  :focusable false
  :monitor 0
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "0%"
    :height "0%"
    :anchor "top center")
  :namespace "eww-music"
  (music))
