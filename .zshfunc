pclean(){
  podman rm $(podman ps -aq)
  podman rmi $(podman images -q)
  podman volume prune
  podman network prune
}

# User Functions
sar(){
  rg "$1" -l | xargs sed -i -e "s/$1/$2/g"
}

atm() {
  subcmd="unmount"

  # Verificar si hay dispositivos disponibles
  devices=$(udisksctl status | rg -e "sd[^a]")
  if [ -z "$devices" ]; then
    echo "No se encontraron dispositivos disponibles."
    return 1
  fi

  device=$(echo "$devices" | gum filter --no-limit --height=25 --placeholder 'Select Device' | awk '{print $(NF)}')
  if [ -z "$device" ]; then
    echo "No se seleccionó ningún dispositivo."
    return 1
  fi

  if [ "$1" != "-u" ]; then
    subcmd="mount"
  fi

  # Verificar si el dispositivo seleccionado tiene particiones
  partitions=$(lsblk | rg -i "$device.*part")
  if [ -z "$partitions" ]; then
    echo "El dispositivo seleccionado no tiene particiones."
    return 1
  fi

  partition_count=$(echo "$partitions" | wc -l)
  if [ "$partition_count" -eq 1 ]; then
    # Solo hay una partición, montar o desmontar automáticamente
    partition=$(echo "$partitions" | sed 's/[├─└─]//g' | awk '{print $1}')
  else
    # Mostrar el menú de selección de partición
    if [ "$subcmd" = "unmount" ]; then
      # Filtrar particiones montadas solamente si se va a desmontar
      mounted_partitions=$(grep -s "/dev/$device" /proc/mounts | awk '{print $1}' | awk -F '/' '{print $NF}')
      if [ -z "$mounted_partitions" ]; then
        echo "No hay particiones montadas en este dispositivo."
        return 1
      fi
      partition=$(echo "$partitions" | grep -i -e "$mounted_partitions" | sed 's/[├─└─]//g' | gum filter --no-limit --height=25 --placeholder 'Select Partition' | awk '{print $1}')
    else
      partition=$(echo "$partitions" | sed 's/[├─└─]//g' | gum filter --no-limit --height=25 --placeholder 'Select Partition' | awk '{print $1}')
    fi
  fi

  if [ -z "$partition" ]; then
    echo "No se seleccionó ninguna partición."
    return 1
  fi

  mounted=$(grep -s "/dev/$partition" /proc/mounts)
  if [ "$mounted" ] && [ "$subcmd" = "mount" ]; then
    echo "Esta partición ya está montada en el sistema."
    return 1
  fi

  udisksctl "$subcmd" -b "/dev/$partition"
}

encrypt(){
  openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}

decrypt(){
  openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in "$1" -out "$2"
}


get_commit_info() {
    TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert" "revert")
    SCOPE=$(gum input --placeholder "scope")
    test -n "$SCOPE" && SCOPE="($SCOPE)"
    SUMMARY=$(gum input --value "$TYPE$SCOPE: " --placeholder "Summary of this change")
    DESCRIPTION=$(gum write --placeholder "Details of this change")
}

gac() {
    get_commit_info
    gum confirm "Commit changes?" && git add . && git commit -m "$SUMMARY" -m "$DESCRIPTION"
}

acp() {
    get_commit_info
    gum confirm "Commit changes?" && git add . && git commit -m "$SUMMARY" -m "$DESCRIPTION" && git push
}

dhg() {
  git checkout --orphan latest_branch
  git add -A
  git commit -am "$1"
  git branch -D main
  git branch -m main
  git push -f origin main
}

fapp() {
	selected="$(/bin/ls /usr/share/applications | gum filter --no-limit --height=25 --placeholder "Select an application")"
	nohup "$(grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//')" >/dev/null 2>&1&
}

fkill() {
  local pid
  pid="$(
    pgrep . -l \
      | gum filter --no-limit --height=25 \
      | awk '{print $1}'
  )" || return
  if [ "$pid" ];then
    kill -"${1:-9}" "$pid"
  fi
}

gitignore() {
    if [ $# = 1 ]; then
      curl -L -s https://www.gitignore.io/api/"$@" > .gitignore
    else
      echo 'usage: gitignore django'
    fi
}

vims(){
	nvim -p "$(rg "$1" -l | xargs)"
}

dirsum() {
    if [ $# = 1 ]; then
	find "$1" -type f -print0 | xargs -0 shasum | awk '{print $1}' | sort | shasum
    else
	echo 'usage: dirsum [directory]'
    fi
}

uuid() {
  repeat "${1-1}" python -c "import uuid; print(uuid.uuid4());"
}

gb() {
  git for-each-ref --color=always --sort=-committerdate refs/heads/ --format=' %(color:green)%(committerdate:relative)%(color:reset)%09%(HEAD) %(color:yellow)%(refname:short)%(color:reset) %(color:magenta)%(authorname)%(color:reset) • %(contents:subject)'
}

gbs() {
  gb | gum filter --no-limit --height=25 --placeholder 'switch branch <choose branch>' | awk '{print $4}' | xargs -ro git switch
}

# Lazy loading

lazy_load() {
    echo "Lazy loading $1 ..."
    local -a names
    if [[ -n "$ZSH_VERSION" ]]; then
        names=("${(@s: :)${1}}")
    else
        names=("$1")
    fi
    unalias "${names[@]}"
    . "$2"
    shift 2
    "$@"
}

group_lazy_load() {
    local script
    script=$1
    shift 1
    for cmd in "$@"; do
        alias "$cmd=lazy_load \"$*\" $script $cmd"
    done
}
group_lazy_load node npm yarn
unset -f group_lazy_load

